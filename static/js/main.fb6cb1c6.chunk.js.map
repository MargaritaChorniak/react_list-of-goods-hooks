{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isReversed","setReversed","NONE","sortType","setSortType","visibleArray","goods","visibleGoods","LENGTH","sort","a","b","length","ALPHABET","localeCompare","reverse","getReorderedGoods","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAqCE,IAAME,EAAgB,WAC3B,MAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAASH,EAASM,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KAEMC,EA9BD,SACLC,EADK,GAGJ,IADCH,EACF,EADEA,SAAUH,EACZ,EADYA,WAENO,EAAY,YAAOD,GAEzB,OAAQH,GACN,KAAKP,EAASY,OACZD,EAAaE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,OAASD,EAAEC,UACzC,MAEF,KAAKhB,EAASiB,SACZN,EAAaE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEI,cAAcH,MAWhD,OAJIX,GACFO,EAAaQ,UAGRR,EAOcS,CACnBnB,EACA,CACEM,WACAH,eAKJ,OACE,sBAAKiB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SACA,UACA,CAAE,WAAYhB,IAAaP,EAASiB,WAEtCO,QAAS,kBAAMhB,EAAYR,EAASiB,WAPtC,iCAYA,wBACEK,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,WAAYhB,IAAaP,EAASY,SAEtCY,QAAS,kBAAMhB,EAAYR,EAASY,SAPtC,4BAYA,wBACEU,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,YAA2B,IAAfnB,IAEhBoB,QAAS,kBAAMnB,GAAaD,IAP9B,sBAYEA,GAAcG,IAAaP,EAASM,OACpC,wBACEgB,KAAK,SACLD,UAAU,4BACVG,QAAS,WACPnB,GAAY,GACZG,EAAYR,EAASM,OALzB,sBAaJ,6BACE,6BACGG,EAAagB,KAAI,SAAAC,GAChB,OACE,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,cC1HtCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.fb6cb1c6.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  switch (sortType) {\n    case SortType.LENGTH:\n      visibleGoods.sort((a, b) => a.length - b.length);\n      break;\n\n    case SortType.ALPHABET:\n      visibleGoods.sort((a, b) => a.localeCompare(b));\n      break;\n\n    default:\n      break;\n  }\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setReversed] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n\n  const visibleArray = getReorderedGoods(\n    goodsFromServer,\n    {\n      sortType,\n      isReversed,\n    },\n\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-info',\n            { 'is-light': sortType !== SortType.ALPHABET },\n          )}\n          onClick={() => setSortType(SortType.ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-success',\n            { 'is-light': sortType !== SortType.LENGTH },\n          )}\n          onClick={() => setSortType(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-warning',\n            { 'is-light': isReversed === false },\n          )}\n          onClick={() => setReversed(!isReversed)}\n        >\n          Reverse\n        </button>\n\n        {(isReversed || sortType !== SortType.NONE) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setReversed(false);\n              setSortType(SortType.NONE);\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        <ul>\n          {visibleArray.map(good => {\n            return (\n              <li data-cy=\"Good\" key={good}>{good}</li>\n            );\n          })}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}